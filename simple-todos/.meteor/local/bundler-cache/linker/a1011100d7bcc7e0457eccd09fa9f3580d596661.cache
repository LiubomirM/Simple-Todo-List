[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactiveDict = Package['reactive-dict'].ReactiveDict;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// imports/api/tasks.js                                                      //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nmodule.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n                                                                             // 2\n                                                                             // 3\n                                                                             //\nvar Tasks = new Mongo.Collection('tasks');                                   // 5\n                                                                             //\nif (Meteor.isServer) {                                                       // 7\n  // This code only runs on the server                                       // 8\n  // Only publish tasks that are public or belong to the current user        // 9\n  Meteor.publish('tasks', function () {                                      // 10\n    function tasksPublication() {                                            // 10\n      return Tasks.find({                                                    // 11\n        $or: [{ 'private': { $ne: true } }, { owner: this.userId }]          // 12\n      });                                                                    // 11\n    }                                                                        // 17\n                                                                             //\n    return tasksPublication;                                                 // 10\n  }());                                                                      // 10\n}                                                                            // 18\n                                                                             //\nMeteor.methods({                                                             // 20\n  'tasks.insert': function () {                                              // 21\n    function tasksInsert(text) {                                             // 20\n      check(text, String);                                                   // 22\n                                                                             //\n      // Make sure the user is logged in before inserting a task             // 24\n      if (!this.userId) {                                                    // 25\n        throw new Meteor.Error('not-authorized');                            // 26\n      }                                                                      // 27\n                                                                             //\n      Tasks.insert({                                                         // 29\n        text: text,                                                          // 30\n        createdAt: new Date(),                                               // 31\n        owner: this.userId,                                                  // 32\n        username: Meteor.users.findOne(this.userId).username                 // 33\n      });                                                                    // 29\n    }                                                                        // 35\n                                                                             //\n    return tasksInsert;                                                      // 20\n  }(),                                                                       // 20\n  'tasks.remove': function () {                                              // 36\n    function tasksRemove(taskId) {                                           // 20\n      check(taskId, String);                                                 // 37\n                                                                             //\n      var task = Tasks.findOne(taskId);                                      // 39\n      if (task['private'] && task.owner !== this.userId) {                   // 40\n        // If the task is private, make sure only the owner can delete it    // 41\n        throw new Meteor.Error('not-authorized');                            // 42\n      }                                                                      // 43\n                                                                             //\n      Tasks.remove(taskId);                                                  // 45\n    }                                                                        // 46\n                                                                             //\n    return tasksRemove;                                                      // 20\n  }(),                                                                       // 20\n  'tasks.setChecked': function () {                                          // 47\n    function tasksSetChecked(taskId, setChecked) {                           // 20\n      check(taskId, String);                                                 // 48\n      check(setChecked, Boolean);                                            // 49\n                                                                             //\n      var task = Tasks.findOne(taskId);                                      // 51\n      if (task['private'] && task.owner !== this.userId) {                   // 52\n        // If the task is private, make sure only the owner can check it off\n        throw new Meteor.Error('not-authorized');                            // 54\n      }                                                                      // 55\n                                                                             //\n      Tasks.update(taskId, { $set: { checked: setChecked } });               // 57\n    }                                                                        // 58\n                                                                             //\n    return tasksSetChecked;                                                  // 20\n  }(),                                                                       // 20\n  'tasks.setPrivate': function () {                                          // 59\n    function tasksSetPrivate(taskId, setToPrivate) {                         // 20\n      check(taskId, String);                                                 // 60\n      check(setToPrivate, Boolean);                                          // 61\n                                                                             //\n      var task = Tasks.findOne(taskId);                                      // 63\n                                                                             //\n      // Make sure only the task owner can make a task private               // 65\n      if (task.owner !== this.userId) {                                      // 66\n        throw new Meteor.Error('not-authorized');                            // 67\n      }                                                                      // 68\n                                                                             //\n      Tasks.update(taskId, { $set: { 'private': setToPrivate } });           // 70\n    }                                                                        // 71\n                                                                             //\n    return tasksSetPrivate;                                                  // 20\n  }()                                                                        // 20\n});                                                                          // 20\n///////////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"meteor/meteor\",\"../imports/api/tasks.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// server/main.js                                                            //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});  // 1\n                                                                             //\nMeteor.startup(function () {module.import('../imports/api/tasks.js');        // 3\n                                                                             // 4\n});                                                                          // 5\n///////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/tasks.js","/server/main.js"],"names":["Meteor","Mongo","check","Tasks","Collection","isServer","publish","tasksPublication","find","$or","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","users","findOne","taskId","task","remove","setChecked","Boolean","update","$set","checked","setToPrivate","startup"],"mappings":";;;;;;;;AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAMC,QAAQ,IAAIF,MAAMG,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAIJ,OAAOK,QAAX,EAAqB;AACnB;AACA;AACAL,SAAOM,OAAP,CAAe,OAAf;AAAwB,aAASC,gBAAT,GAA4B;AAClD,aAAOJ,MAAMK,IAAN,CAAW;AAChBC,aAAK,CACH,EAAE,WAAS,EAAEC,KAAK,IAAP,EAAX,EADG,EAEH,EAAEC,OAAO,KAAKC,MAAd,EAFG;AADW,OAAX,CAAP;AAMD;;AAPD,WAAiCL,gBAAjC;AAAA;AAQD;;AAEDP,OAAOa,OAAP,CAAe;AACb,gBADa;AAAA,yBACEC,IADF,EACQ;AACnBZ,YAAMY,IAAN,EAAYC,MAAZ;;AAEA;AACA,UAAI,CAAE,KAAKH,MAAX,EAAmB;AACjB,cAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDb,YAAMc,MAAN,CAAa;AACXH,kBADW;AAEXI,mBAAW,IAAIC,IAAJ,EAFA;AAGXR,eAAO,KAAKC,MAHD;AAIXQ,kBAAUpB,OAAOqB,KAAP,CAAaC,OAAb,CAAqB,KAAKV,MAA1B,EAAkCQ;AAJjC,OAAb;AAMD;;AAfY;AAAA;AAgBb,gBAhBa;AAAA,yBAgBEG,MAhBF,EAgBU;AACrBrB,YAAMqB,MAAN,EAAcR,MAAd;;AAEH,UAAMS,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;AACG,UAAIC,mBAAgBA,KAAKb,KAAL,KAAe,KAAKC,MAAxC,EAAgD;AAC9C;AACA,cAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDb,YAAMsB,MAAN,CAAaF,MAAb;AACD;;AA1BY;AAAA;AA2Bb,oBA3Ba;AAAA,6BA2BMA,MA3BN,EA2BcG,UA3Bd,EA2B0B;AACrCxB,YAAMqB,MAAN,EAAcR,MAAd;AACAb,YAAMwB,UAAN,EAAkBC,OAAlB;;AAEH,UAAMH,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;AACG,UAAIC,mBAAgBA,KAAKb,KAAL,KAAe,KAAKC,MAAxC,EAAgD;AAC9C;AACA,cAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDb,YAAMyB,MAAN,CAAaL,MAAb,EAAqB,EAAEM,MAAM,EAAEC,SAASJ,UAAX,EAAR,EAArB;AACD;;AAtCY;AAAA;AAuCb,oBAvCa;AAAA,6BAuCMH,MAvCN,EAuCcQ,YAvCd,EAuC4B;AACvC7B,YAAMqB,MAAN,EAAcR,MAAd;AACAb,YAAM6B,YAAN,EAAoBJ,OAApB;;AAEA,UAAMH,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;;AAEA;AACA,UAAIC,KAAKb,KAAL,KAAe,KAAKC,MAAxB,EAAgC;AAC9B,cAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDb,YAAMyB,MAAN,CAAaL,MAAb,EAAqB,EAAEM,MAAM,EAAE,WAASE,YAAX,EAAR,EAArB;AACD;;AAnDY;AAAA;AAAA,CAAf,iF;;;;;;;;;;;ACnBA,SAAS/B,MAAT,QAAuB,eAAvB;;AAEAA,OAAOgC,OAAP,CAAe,YAAM;AACnB,SAAO,yBAAP;AACD,CAFD,gF","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n \r\nexport const Tasks = new Mongo.Collection('tasks');\r\n \r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [\r\n        { private: { $ne: true } },\r\n        { owner: this.userId },\r\n      ],\r\n    });\r\n  });\r\n}\r\n \r\nMeteor.methods({\r\n  'tasks.insert'(text) {\r\n    check(text, String);\r\n \r\n    // Make sure the user is logged in before inserting a task\r\n    if (! this.userId) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: this.userId,\r\n      username: Meteor.users.findOne(this.userId).username,\r\n    });\r\n  },\r\n  'tasks.remove'(taskId) {\r\n    check(taskId, String);\r\n \r\n\tconst task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== this.userId) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.remove(taskId);\r\n  },\r\n  'tasks.setChecked'(taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n \r\n\tconst task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== this.userId) {\r\n      // If the task is private, make sure only the owner can check it off\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\t\r\n    Tasks.update(taskId, { $set: { checked: setChecked } });\r\n  },\r\n  'tasks.setPrivate'(taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n \r\n    const task = Tasks.findOne(taskId);\r\n \r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== this.userId) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  import '../imports/api/tasks.js';\n});\n"]}}]