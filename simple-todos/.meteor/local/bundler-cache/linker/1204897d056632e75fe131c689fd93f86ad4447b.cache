[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nReactiveDict = Package['reactive-dict'].ReactiveDict;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package['templating-runtime'].Template;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"ui\":{\"body.html\":[\"./template.body.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/body.html                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.exports = require(\"./template.body.js\");                                                                 // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"template.body.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/template.body.js                                                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n                                                                                                                // 1\nTemplate.body.addContent((function() {                                                                          // 2\n  var view = this;                                                                                              // 3\n  return HTML.DIV({                                                                                             // 4\n    class: \"container\"                                                                                          // 5\n  }, \"\\n    \", HTML.HEADER(\"\\n      \", HTML.H1(\"Todo List (\", Blaze.View(\"lookup:incompleteCount\", function() {\n    return Spacebars.mustache(view.lookup(\"incompleteCount\"));                                                  // 7\n  }), \")\"), \"\\n \\n\\t  \", HTML.Raw('<label class=\"hide-completed\">\\n      <input type=\"checkbox\">\\n        Hide Completed Tasks\\n      </label>'), \"\\n\\t  \\n\\t  \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n\\t  \\n\\t  \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));                                                          // 9\n  }, function() {                                                                                               // 10\n    return [ \"\\n        \", HTML.FORM({                                                                          // 11\n      class: \"new-task\"                                                                                         // 12\n    }, \"\\n          \", HTML.INPUT({                                                                             // 13\n      type: \"text\",                                                                                             // 14\n      name: \"text\",                                                                                             // 15\n      placeholder: \"Type to add new tasks\"                                                                      // 16\n    }), \"\\n        \"), \"\\n      \" ];                                                                            // 17\n  }), \"\\n    \"), \"\\n \\n    \", HTML.UL(\"\\n      \", Blaze.Each(function() {                                       // 18\n    return Spacebars.call(view.lookup(\"tasks\"));                                                                // 19\n  }, function() {                                                                                               // 20\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"task\")), \"\\n      \" ];                        // 21\n  }), \"\\n    \"), \"\\n  \");                                                                                       // 22\n}));                                                                                                            // 23\nMeteor.startup(Template.body.renderToDocument);                                                                 // 24\n                                                                                                                // 25\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"task.html\":[\"./template.task.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/task.html                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.exports = require(\"./template.task.js\");                                                                 // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"template.task.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/template.task.js                                                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n                                                                                                                // 1\nTemplate.__checkName(\"task\");                                                                                   // 2\nTemplate[\"task\"] = new Template(\"Template.task\", (function() {                                                  // 3\n  var view = this;                                                                                              // 4\n  return HTML.LI({                                                                                              // 5\n    class: function() {                                                                                         // 6\n      return [ Blaze.If(function() {                                                                            // 7\n        return Spacebars.call(view.lookup(\"checked\"));                                                          // 8\n      }, function() {                                                                                           // 9\n        return \"checked\";                                                                                       // 10\n      }), \" \", Blaze.If(function() {                                                                            // 11\n        return Spacebars.call(view.lookup(\"private\"));                                                          // 12\n      }, function() {                                                                                           // 13\n        return \"private\";                                                                                       // 14\n      }) ];                                                                                                     // 15\n    }                                                                                                           // 16\n  }, HTML.Raw('\\n    <button class=\"delete\">&times;</button>\\n \\n    '), HTML.INPUT({                           // 17\n    type: \"checkbox\",                                                                                           // 18\n    checked: function() {                                                                                       // 19\n      return Spacebars.mustache(view.lookup(\"checked\"));                                                        // 20\n    },                                                                                                          // 21\n    class: \"toggle-checked\"                                                                                     // 22\n  }), \"\\n \\n\\t\", Blaze.If(function() {                                                                          // 23\n    return Spacebars.call(view.lookup(\"isOwner\"));                                                              // 24\n  }, function() {                                                                                               // 25\n    return [ \"\\n      \", HTML.BUTTON({                                                                          // 26\n      class: \"toggle-private\"                                                                                   // 27\n    }, \"\\n        \", Blaze.If(function() {                                                                      // 28\n      return Spacebars.call(view.lookup(\"private\"));                                                            // 29\n    }, function() {                                                                                             // 30\n      return \"\\n          Private\\n        \";                                                                   // 31\n    }, function() {                                                                                             // 32\n      return \"\\n          Public\\n        \";                                                                    // 33\n    }), \"\\n      \"), \"\\n    \" ];                                                                                // 34\n  }), \"\\n\\t\\n\\t\", HTML.SPAN({                                                                                   // 35\n    class: \"text\"                                                                                               // 36\n  }, HTML.STRONG(Blaze.View(\"lookup:username\", function() {                                                     // 37\n    return Spacebars.mustache(view.lookup(\"username\"));                                                         // 38\n  })), \" - \", Blaze.View(\"lookup:text\", function() {                                                            // 39\n    return Spacebars.mustache(view.lookup(\"text\"));                                                             // 40\n  })), \"\\n  \");                                                                                                 // 41\n}));                                                                                                            // 42\n                                                                                                                // 43\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"body.js\":[\"meteor/meteor\",\"meteor/templating\",\"meteor/reactive-dict\",\"../api/tasks.js\",\"./task.js\",\"./body.html\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/body.js                                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Template;module.import('meteor/templating',{\"Template\":function(v){Template=v}});var ReactiveDict;module.import('meteor/reactive-dict',{\"ReactiveDict\":function(v){ReactiveDict=v}});var Tasks;module.import('../api/tasks.js',{\"Tasks\":function(v){Tasks=v}});module.import('./task.js');module.import('./body.html');\n                                                                                                                // 2\n                                                                                                                // 3\n                                                                                                                // 4\n                                                                                                                //\n                                                                                                                // 6\n                                                                                                                // 7\n                                                                                                                //\nTemplate.body.onCreated(function () {                                                                           // 9\n  function bodyOnCreated() {                                                                                    // 9\n    this.state = new ReactiveDict();                                                                            // 10\n  }                                                                                                             // 11\n                                                                                                                //\n  return bodyOnCreated;                                                                                         // 9\n}());                                                                                                           // 9\n                                                                                                                //\nTemplate.body.onCreated(function () {                                                                           // 13\n  function bodyOnCreated() {                                                                                    // 13\n    this.state = new ReactiveDict();                                                                            // 14\n    Meteor.subscribe('tasks');                                                                                  // 15\n  }                                                                                                             // 16\n                                                                                                                //\n  return bodyOnCreated;                                                                                         // 13\n}());                                                                                                           // 13\n                                                                                                                //\nTemplate.body.helpers({                                                                                         // 18\n  tasks: function () {                                                                                          // 19\n    function tasks() {                                                                                          // 18\n      var instance = Template.instance();                                                                       // 20\n      if (instance.state.get('hideCompleted')) {                                                                // 21\n        // If hide completed is checked, filter tasks                                                           // 22\n        return Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });                             // 23\n      }                                                                                                         // 24\n      // Otherwise, return all of the tasks                                                                     // 25\n      return Tasks.find({}, { sort: { createdAt: -1 } });                                                       // 26\n    }                                                                                                           // 27\n                                                                                                                //\n    return tasks;                                                                                               // 18\n  }(),                                                                                                          // 18\n  incompleteCount: function () {                                                                                // 28\n    function incompleteCount() {                                                                                // 18\n      return Tasks.find({ checked: { $ne: true } }).count();                                                    // 29\n    }                                                                                                           // 30\n                                                                                                                //\n    return incompleteCount;                                                                                     // 18\n  }()                                                                                                           // 18\n});                                                                                                             // 18\n                                                                                                                //\nTemplate.body.events({                                                                                          // 33\n  'submit .new-task': function () {                                                                             // 34\n    function submitNewTask(event) {                                                                             // 33\n      // Prevent default browser form submit                                                                    // 35\n      event.preventDefault();                                                                                   // 36\n                                                                                                                //\n      // Get value from form element                                                                            // 38\n      var target = event.target;                                                                                // 39\n      var text = target.text.value;                                                                             // 40\n                                                                                                                //\n      // Insert a task into the collection                                                                      // 42\n      Meteor.call('tasks.insert', text);                                                                        // 43\n                                                                                                                //\n      // Clear form                                                                                             // 45\n      target.text.value = '';                                                                                   // 46\n    }                                                                                                           // 47\n                                                                                                                //\n    return submitNewTask;                                                                                       // 33\n  }(),                                                                                                          // 33\n  'change .hide-completed input': function () {                                                                 // 48\n    function changeHideCompletedInput(event, instance) {                                                        // 33\n      instance.state.set('hideCompleted', event.target.checked);                                                // 49\n    }                                                                                                           // 50\n                                                                                                                //\n    return changeHideCompletedInput;                                                                            // 33\n  }()                                                                                                           // 33\n});                                                                                                             // 33\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"task.js\":[\"meteor/meteor\",\"meteor/templating\",\"./task.html\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/task.js                                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Template;module.import('meteor/templating',{\"Template\":function(v){Template=v}});module.import('./task.html');\n                                                                                                                // 2\n                                                                                                                //\n                                                                                                                // 4\n                                                                                                                //\nTemplate.task.helpers({                                                                                         // 6\n  isOwner: function () {                                                                                        // 7\n    function isOwner() {                                                                                        // 6\n      return this.owner === Meteor.userId();                                                                    // 8\n    }                                                                                                           // 9\n                                                                                                                //\n    return isOwner;                                                                                             // 6\n  }()                                                                                                           // 6\n});                                                                                                             // 6\n                                                                                                                //\nTemplate.task.events({                                                                                          // 12\n  'click .toggle-checked': function () {                                                                        // 13\n    function clickToggleChecked() {                                                                             // 12\n      // Set the checked property to the opposite of its current value                                          // 14\n      Meteor.call('tasks.setChecked', this._id, !this.checked);                                                 // 15\n    }                                                                                                           // 16\n                                                                                                                //\n    return clickToggleChecked;                                                                                  // 12\n  }(),                                                                                                          // 12\n  'click .delete': function () {                                                                                // 17\n    function clickDelete() {                                                                                    // 12\n      Meteor.call('tasks.remove', this._id);                                                                    // 18\n    }                                                                                                           // 19\n                                                                                                                //\n    return clickDelete;                                                                                         // 12\n  }(),                                                                                                          // 12\n  'click .toggle-private': function () {                                                                        // 20\n    function clickTogglePrivate() {                                                                             // 12\n      Meteor.call('tasks.setPrivate', this._id, !this['private']);                                              // 21\n    }                                                                                                           // 22\n                                                                                                                //\n    return clickTogglePrivate;                                                                                  // 12\n  }()                                                                                                           // 12\n});                                                                                                             // 12\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/api/tasks.js                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.export({Tasks:function(){return Tasks}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n                                                                                                                // 2\n                                                                                                                // 3\n                                                                                                                //\nvar Tasks = new Mongo.Collection('tasks');                                                                      // 5\n                                                                                                                //\nif (Meteor.isServer) {                                                                                          // 7\n  // This code only runs on the server                                                                          // 8\n  // Only publish tasks that are public or belong to the current user                                           // 9\n  Meteor.publish('tasks', function () {                                                                         // 10\n    function tasksPublication() {                                                                               // 10\n      return Tasks.find({                                                                                       // 11\n        $or: [{ 'private': { $ne: true } }, { owner: this.userId }]                                             // 12\n      });                                                                                                       // 11\n    }                                                                                                           // 17\n                                                                                                                //\n    return tasksPublication;                                                                                    // 10\n  }());                                                                                                         // 10\n}                                                                                                               // 18\n                                                                                                                //\nMeteor.methods({                                                                                                // 20\n  'tasks.insert': function () {                                                                                 // 21\n    function tasksInsert(text) {                                                                                // 20\n      check(text, String);                                                                                      // 22\n                                                                                                                //\n      // Make sure the user is logged in before inserting a task                                                // 24\n      if (!this.userId) {                                                                                       // 25\n        throw new Meteor.Error('not-authorized');                                                               // 26\n      }                                                                                                         // 27\n                                                                                                                //\n      Tasks.insert({                                                                                            // 29\n        text: text,                                                                                             // 30\n        createdAt: new Date(),                                                                                  // 31\n        owner: this.userId,                                                                                     // 32\n        username: Meteor.users.findOne(this.userId).username                                                    // 33\n      });                                                                                                       // 29\n    }                                                                                                           // 35\n                                                                                                                //\n    return tasksInsert;                                                                                         // 20\n  }(),                                                                                                          // 20\n  'tasks.remove': function () {                                                                                 // 36\n    function tasksRemove(taskId) {                                                                              // 20\n      check(taskId, String);                                                                                    // 37\n                                                                                                                //\n      var task = Tasks.findOne(taskId);                                                                         // 39\n      if (task['private'] && task.owner !== this.userId) {                                                      // 40\n        // If the task is private, make sure only the owner can delete it                                       // 41\n        Tasks.remove(taskId);                                                                                   // 42\n        throw new Meteor.Error('not-authorized');                                                               // 43\n      }                                                                                                         // 44\n    }                                                                                                           // 47\n                                                                                                                //\n    return tasksRemove;                                                                                         // 20\n  }(),                                                                                                          // 20\n  'tasks.setChecked': function () {                                                                             // 48\n    function tasksSetChecked(taskId, setChecked) {                                                              // 20\n      check(taskId, String);                                                                                    // 49\n      check(setChecked, Boolean);                                                                               // 50\n                                                                                                                //\n      var task = Tasks.findOne(taskId);                                                                         // 52\n      if (task['private'] && task.owner !== this.userId) {                                                      // 53\n        // If the task is private, make sure only the owner can check it off                                    // 54\n        throw new Meteor.Error('not-authorized');                                                               // 55\n      }                                                                                                         // 56\n                                                                                                                //\n      Tasks.update(taskId, { $set: { checked: setChecked } });                                                  // 58\n    }                                                                                                           // 59\n                                                                                                                //\n    return tasksSetChecked;                                                                                     // 20\n  }(),                                                                                                          // 20\n  'tasks.setPrivate': function () {                                                                             // 60\n    function tasksSetPrivate(taskId, setToPrivate) {                                                            // 20\n      check(taskId, String);                                                                                    // 61\n      check(setToPrivate, Boolean);                                                                             // 62\n                                                                                                                //\n      var task = Tasks.findOne(taskId);                                                                         // 64\n                                                                                                                //\n      // Make sure only the task owner can make a task private                                                  // 66\n      if (task.owner !== this.userId) {                                                                         // 67\n        throw new Meteor.Error('not-authorized');                                                               // 68\n      }                                                                                                         // 69\n                                                                                                                //\n      Tasks.update(taskId, { $set: { 'private': setToPrivate } });                                              // 71\n    }                                                                                                           // 72\n                                                                                                                //\n    return tasksSetPrivate;                                                                                     // 20\n  }()                                                                                                           // 20\n});                                                                                                             // 20\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"startup\":{\"accounts-config.js\":[\"meteor/accounts-base\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/startup/accounts-config.js                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar Accounts;module.import('meteor/accounts-base',{\"Accounts\":function(v){Accounts=v}});                        // 1\n                                                                                                                //\nAccounts.ui.config({                                                                                            // 3\n  passwordSignupFields: 'USERNAME_ONLY'                                                                         // 4\n});                                                                                                             // 3\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"client\":{\"main.js\":[\"../imports/startup/accounts-config.js\",\"../imports/ui/body.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// client/main.js                                                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.import('../imports/startup/accounts-config.js');module.import('../imports/ui/body.js');                  // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".html\",\".css\"]});\nrequire(\"./client/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/ui/body.js","/imports/ui/task.js","/imports/api/tasks.js","/imports/startup/accounts-config.js","/client/main.js"],"names":["Meteor","Template","ReactiveDict","Tasks","body","onCreated","bodyOnCreated","state","subscribe","helpers","tasks","instance","get","find","checked","$ne","sort","createdAt","incompleteCount","count","events","event","preventDefault","target","text","value","call","set","task","isOwner","owner","userId","_id","Mongo","check","Collection","isServer","publish","tasksPublication","$or","methods","String","Error","insert","Date","username","users","findOne","taskId","remove","setChecked","Boolean","update","$set","setToPrivate","Accounts","ui","config","passwordSignupFields"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Template } from 'meteor/templating';\r\nimport { ReactiveDict } from 'meteor/reactive-dict'; \r\nimport { Tasks } from '../api/tasks.js';\r\n \r\nimport './task.js';\r\nimport './body.html';\r\n \r\nTemplate.body.onCreated(function bodyOnCreated() {\r\n  this.state = new ReactiveDict();\r\n});\r\n\r\nTemplate.body.onCreated(function bodyOnCreated() {\r\n  this.state = new ReactiveDict();\r\n  Meteor.subscribe('tasks');\r\n});\r\n \r\nTemplate.body.helpers({\r\n  tasks() {\r\n    const instance = Template.instance();\r\n    if (instance.state.get('hideCompleted')) {\r\n      // If hide completed is checked, filter tasks\r\n      return Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });\r\n    }\r\n    // Otherwise, return all of the tasks\r\n    return Tasks.find({}, { sort: { createdAt: -1 } });\r\n  },\r\n  incompleteCount() {\r\n    return Tasks.find({ checked: { $ne: true } }).count();\r\n  },\r\n});\r\n\r\nTemplate.body.events({\r\n  'submit .new-task'(event) {\r\n    // Prevent default browser form submit\r\n    event.preventDefault();\r\n \r\n    // Get value from form element\r\n    const target = event.target;\r\n    const text = target.text.value;\r\n \r\n    // Insert a task into the collection\r\n    Meteor.call('tasks.insert', text);\r\n\t\r\n    // Clear form\r\n    target.text.value = '';\r\n  },\r\n  'change .hide-completed input'(event, instance) {\r\n    instance.state.set('hideCompleted', event.target.checked);\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Template } from 'meteor/templating';\r\n \r\nimport './task.html';\r\n \r\nTemplate.task.helpers({\r\n  isOwner() {\r\n    return this.owner === Meteor.userId();\r\n  },\r\n});\r\n \r\nTemplate.task.events({\r\n  'click .toggle-checked'() {\r\n    // Set the checked property to the opposite of its current value\r\n    Meteor.call('tasks.setChecked', this._id, !this.checked);\r\n  },\r\n  'click .delete'() {\r\n    Meteor.call('tasks.remove', this._id);\r\n  },\r\n  'click .toggle-private'() {\r\n    Meteor.call('tasks.setPrivate', this._id, !this.private);\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n \r\nexport const Tasks = new Mongo.Collection('tasks');\r\n \r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [\r\n        { private: { $ne: true } },\r\n        { owner: this.userId },\r\n      ],\r\n    });\r\n  });\r\n}\r\n \r\nMeteor.methods({\r\n  'tasks.insert'(text) {\r\n    check(text, String);\r\n \r\n    // Make sure the user is logged in before inserting a task\r\n    if (! this.userId) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: this.userId,\r\n      username: Meteor.users.findOne(this.userId).username,\r\n    });\r\n  },\r\n  'tasks.remove'(taskId) {\r\n    check(taskId, String);\r\n \r\n\tconst task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== this.userId) {\r\n      // If the task is private, make sure only the owner can delete it\r\n\t  Tasks.remove(taskId);\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\t\r\n    \r\n  },\r\n  'tasks.setChecked'(taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n \r\n\tconst task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== this.userId) {\r\n      // If the task is private, make sure only the owner can check it off\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\t\r\n    Tasks.update(taskId, { $set: { checked: setChecked } });\r\n  },\r\n  'tasks.setPrivate'(taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n \r\n    const task = Tasks.findOne(taskId);\r\n \r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== this.userId) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n  },\r\n});","import { Accounts } from 'meteor/accounts-base';\r\n \r\nAccounts.ui.config({\r\n  passwordSignupFields: 'USERNAME_ONLY',\r\n});","import '../imports/startup/accounts-config.js';\nimport '../imports/ui/body.js';"]}}]