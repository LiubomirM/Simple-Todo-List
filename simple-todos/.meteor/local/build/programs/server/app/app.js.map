{"version":3,"sources":["meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/server/main.js"],"names":["Meteor","Mongo","check","Tasks","Collection","isServer","publish","tasksPublication","find","$or","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","users","findOne","taskId","task","remove","setChecked","Boolean","update","$set","checked","setToPrivate","startup"],"mappings":";;;;;;;;AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAMC,QAAQ,IAAIF,MAAMG,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAIJ,OAAOK,QAAX,EAAqB;AACnB;AACA;AACAL,SAAOM,OAAP,CAAe,OAAf;AAAwB,aAASC,gBAAT,GAA4B;AAClD,aAAOJ,MAAMK,IAAN,CAAW;AAChBC,aAAK,CACH,EAAE,WAAS,EAAEC,KAAK,IAAP,EAAX,EADG,EAEH,EAAEC,OAAO,KAAKC,MAAd,EAFG;AADW,OAAX,CAAP;AAMD;;AAPD,WAAiCL,gBAAjC;AAAA;AAQD;;AAEDP,OAAOa,OAAP,CAAe;AACb,gBADa;AAAA,yBACEC,IADF,EACQ;AACnBZ,YAAMY,IAAN,EAAYC,MAAZ;;AAEA;AACA,UAAI,CAAE,KAAKH,MAAX,EAAmB;AACjB,cAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDb,YAAMc,MAAN,CAAa;AACXH,kBADW;AAEXI,mBAAW,IAAIC,IAAJ,EAFA;AAGXR,eAAO,KAAKC,MAHD;AAIXQ,kBAAUpB,OAAOqB,KAAP,CAAaC,OAAb,CAAqB,KAAKV,MAA1B,EAAkCQ;AAJjC,OAAb;AAMD;;AAfY;AAAA;AAgBb,gBAhBa;AAAA,yBAgBEG,MAhBF,EAgBU;AACrBrB,YAAMqB,MAAN,EAAcR,MAAd;;AAEH,UAAMS,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;AACG,UAAIC,mBAAgBA,KAAKb,KAAL,KAAe,KAAKC,MAAxC,EAAgD;AAC9C;AACA,cAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACD;AACJ,UAAIQ,KAAKb,KAAL,KAAe,KAAKC,MAAxB,EAAgC;AAC/B;AACAT,cAAMsB,MAAN,CAAaF,MAAb;AACA;AAEC;;AA7BY;AAAA;AA8Bb,oBA9Ba;AAAA,6BA8BMA,MA9BN,EA8BcG,UA9Bd,EA8B0B;AACrCxB,YAAMqB,MAAN,EAAcR,MAAd;AACAb,YAAMwB,UAAN,EAAkBC,OAAlB;;AAEH,UAAMH,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;AACG,UAAIC,mBAAgBA,KAAKb,KAAL,KAAe,KAAKC,MAAxC,EAAgD;AAC9C;AACA,cAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDb,YAAMyB,MAAN,CAAaL,MAAb,EAAqB,EAAEM,MAAM,EAAEC,SAASJ,UAAX,EAAR,EAArB;AACD;;AAzCY;AAAA;AA0Cb,oBA1Ca;AAAA,6BA0CMH,MA1CN,EA0CcQ,YA1Cd,EA0C4B;AACvC7B,YAAMqB,MAAN,EAAcR,MAAd;AACAb,YAAM6B,YAAN,EAAoBJ,OAApB;;AAEA,UAAMH,OAAOrB,MAAMmB,OAAN,CAAcC,MAAd,CAAb;;AAEA;AACA,UAAIC,KAAKb,KAAL,KAAe,KAAKC,MAAxB,EAAgC;AAC9B,cAAM,IAAIZ,OAAOgB,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAEDb,YAAMyB,MAAN,CAAaL,MAAb,EAAqB,EAAEM,MAAM,EAAE,WAASE,YAAX,EAAR,EAArB;AACD;;AAtDY;AAAA;AAAA,CAAf,iF;;;;;;;;;;;ACnBA,SAAS/B,MAAT,QAAuB,eAAvB;;AAEAA,OAAOgC,OAAP,CAAe,YAAM;AACnB,SAAO,yBAAP;AACD,CAFD,gF","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n \r\nexport const Tasks = new Mongo.Collection('tasks');\r\n \r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [\r\n        { private: { $ne: true } },\r\n        { owner: this.userId },\r\n      ],\r\n    });\r\n  });\r\n}\r\n \r\nMeteor.methods({\r\n  'tasks.insert'(text) {\r\n    check(text, String);\r\n \r\n    // Make sure the user is logged in before inserting a task\r\n    if (! this.userId) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: this.userId,\r\n      username: Meteor.users.findOne(this.userId).username,\r\n    });\r\n  },\r\n  'tasks.remove'(taskId) {\r\n    check(taskId, String);\r\n \r\n\tconst task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== this.userId) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\tif (task.owner === this.userId) {\r\n\t\t// Only the owner can delete their tasks\r\n\t\tTasks.remove(taskId);\r\n\t}\r\n    \r\n  },\r\n  'tasks.setChecked'(taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n \r\n\tconst task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== this.userId) {\r\n      // If the task is private, make sure only the owner can check it off\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\t\r\n    Tasks.update(taskId, { $set: { checked: setChecked } });\r\n  },\r\n  'tasks.setPrivate'(taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n \r\n    const task = Tasks.findOne(taskId);\r\n \r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== this.userId) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  import '../imports/api/tasks.js';\n});\n"]}