{"version":3,"sources":["meteor://ðŸ’»app/imports/ui/body.js","meteor://ðŸ’»app/imports/ui/task.js","meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/imports/startup/accounts-config.js","meteor://ðŸ’»app/client/main.js"],"names":["Meteor","Template","ReactiveDict","Tasks","body","onCreated","bodyOnCreated","state","subscribe","helpers","tasks","instance","get","find","checked","$ne","sort","createdAt","incompleteCount","count","events","event","preventDefault","target","text","value","call","set","task","isOwner","owner","userId","_id","Mongo","check","Collection","isServer","publish","tasksPublication","$or","methods","String","Error","insert","Date","username","users","findOne","taskId","remove","setChecked","Boolean","update","$set","setToPrivate","Accounts","ui","config","passwordSignupFields"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Template } from 'meteor/templating';\r\nimport { ReactiveDict } from 'meteor/reactive-dict'; \r\nimport { Tasks } from '../api/tasks.js';\r\n \r\nimport './task.js';\r\nimport './body.html';\r\n \r\nTemplate.body.onCreated(function bodyOnCreated() {\r\n  this.state = new ReactiveDict();\r\n});\r\n\r\nTemplate.body.onCreated(function bodyOnCreated() {\r\n  this.state = new ReactiveDict();\r\n  Meteor.subscribe('tasks');\r\n});\r\n \r\nTemplate.body.helpers({\r\n  tasks() {\r\n    const instance = Template.instance();\r\n    if (instance.state.get('hideCompleted')) {\r\n      // If hide completed is checked, filter tasks\r\n      return Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });\r\n    }\r\n    // Otherwise, return all of the tasks\r\n    return Tasks.find({}, { sort: { createdAt: -1 } });\r\n  },\r\n  incompleteCount() {\r\n    return Tasks.find({ checked: { $ne: true } }).count();\r\n  },\r\n});\r\n\r\nTemplate.body.events({\r\n  'submit .new-task'(event) {\r\n    // Prevent default browser form submit\r\n    event.preventDefault();\r\n \r\n    // Get value from form element\r\n    const target = event.target;\r\n    const text = target.text.value;\r\n \r\n    // Insert a task into the collection\r\n    Meteor.call('tasks.insert', text);\r\n\t\r\n    // Clear form\r\n    target.text.value = '';\r\n  },\r\n  'change .hide-completed input'(event, instance) {\r\n    instance.state.set('hideCompleted', event.target.checked);\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Template } from 'meteor/templating';\r\n \r\nimport './task.html';\r\n \r\nTemplate.task.helpers({\r\n  isOwner() {\r\n    return this.owner === Meteor.userId();\r\n  },\r\n});\r\n \r\nTemplate.task.events({\r\n  'click .toggle-checked'() {\r\n    // Set the checked property to the opposite of its current value\r\n    Meteor.call('tasks.setChecked', this._id, !this.checked);\r\n  },\r\n  'click .delete'() {\r\n    Meteor.call('tasks.remove', this._id);\r\n  },\r\n  'click .toggle-private'() {\r\n    Meteor.call('tasks.setPrivate', this._id, !this.private);\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n \r\nexport const Tasks = new Mongo.Collection('tasks');\r\n \r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [\r\n        { private: { $ne: true } },\r\n        { owner: this.userId },\r\n      ],\r\n    });\r\n  });\r\n}\r\n \r\nMeteor.methods({\r\n  'tasks.insert'(text) {\r\n    check(text, String);\r\n \r\n    // Make sure the user is logged in before inserting a task\r\n    if (! this.userId) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: this.userId,\r\n      username: Meteor.users.findOne(this.userId).username,\r\n    });\r\n  },\r\n  'tasks.remove'(taskId) {\r\n    check(taskId, String);\r\n \r\n\tconst task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== this.userId) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\tif (task.owner === this.userId) {\r\n\t\t// Only the owner can delete their tasks\r\n\t\tTasks.remove(taskId);\r\n\t}\r\n    \r\n  },\r\n  'tasks.setChecked'(taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n \r\n\tconst task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== this.userId) {\r\n      // If the task is private, make sure only the owner can check it off\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n\t\r\n    Tasks.update(taskId, { $set: { checked: setChecked } });\r\n  },\r\n  'tasks.setPrivate'(taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n \r\n    const task = Tasks.findOne(taskId);\r\n \r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== this.userId) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n  },\r\n});","import { Accounts } from 'meteor/accounts-base';\r\n \r\nAccounts.ui.config({\r\n  passwordSignupFields: 'USERNAME_ONLY',\r\n});","import '../imports/startup/accounts-config.js';\nimport '../imports/ui/body.js';"]}